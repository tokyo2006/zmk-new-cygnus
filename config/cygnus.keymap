/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define SCROLLER 1
#define MOUSE 4

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <29 30>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <33 34>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        to_fun {
            bindings = <&to 3>;
            key-positions = <40 41>;
            require-prior-idle-ms = <125>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        to_flash {
            bindings = <&to 4>;
            key-positions = <38 43>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 4>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <4 5>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <6 7>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            require-prior-idle-ms = <125>;
            layers = <0 1 2>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "Home-Row-Mods";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer/Tap-Quick";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "Auto-Shift";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hml: hrm_lhs {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LHS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <21 22 23 24 25>;
            hold-trigger-on-release;
        };

        hmr: hrm_rhs {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RHS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 16 17 18 14>;
            hold-trigger-on-release;
        };

        lplt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        rpgt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            bindings = <
&kp TAB  &kp Q           &kp W           &kp E               &kp R             &kp T  &kp Y  &kp U              &kp I                &kp O            &kp P               &kp BACKSLASH  &none  &none
&kp ESC  &hm LEFT_ALT A  &hm LEFT_GUI S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G  &kp H  &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_GUI L  &hm RIGHT_ALT SEMI  &kp ENTER
&none    &kp Z           &kp X           &kp C               &kp V             &kp B  &kp N  &kp M              &kp COMMA            &kp DOT          &kp SLASH           &none
                                         &none               &kp SPACE         &mo 1  &mo 2  &kp BACKSPACE      &to 4
            >;

            label = "Alpha";
        };

        Num {
            bindings = <
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2             &kp NUMBER_3               &kp NUMBER_4                &kp NUMBER_5      &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8       &kp NUMBER_9   &kp NUMBER_0   &none      &none  &none
&kp ESC    &kp LEFT_ALT  &hm LEFT_GUI LEFT_ARROW  &hm LEFT_CONTROL UP_ARROW  &hm LEFT_SHIFT RIGHT_ARROW  &kp PAGE_UP       &msc SCRL_UP       &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp ENTER
&none      &none         &kp HOME                 &kp DOWN_ARROW             &kp END                     &kp PAGE_DOWN     &msc SCRL_DOWN     &none            &none              &none          &none          &none
                                                  &none                      &trans                      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans           &none
            >;

            label = "Num";
        };

        Sym {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN              &kp HASH                   &kp DOLLAR                  &kp PERCENT       &kp CARET          &kp AMPERSAND    &kp STAR           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none      &none  &none
&kp ESC    &kp LEFT_ALT     &hm LEFT_GUI LEFT_ARROW  &hm LEFT_CONTROL UP_ARROW  &hm LEFT_SHIFT RIGHT_ARROW  &kp PAGE_UP       &msc SCRL_UP       &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_GUI         &kp RIGHT_ALT          &kp ENTER
&none      &none            &kp HOME                 &kp DOWN_ARROW             &kp END                     &kp PAGE_DOWN     &msc SCRL_DOWN     &none            &none              &none                 &none                  &none
                                                     &none                      &trans                      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans           &none
            >;

            label = "Sym";
        };

        Fun {
            bindings = <
&none    &kp F1  &kp F2   &kp F3   &kp F4   &kp KP_PLUS      &kp KP_MINUS     &kp KP_N7  &kp KP_N8  &kp KP_N9  &none  &none      &none  &none
&kp ESC  &kp F5  &kp F6   &kp F7   &kp F8   &kp KP_MULTIPLY  &kp KP_DIVIDE    &kp KP_N4  &kp KP_N5  &kp KP_N6  &none  &kp ENTER
&none    &kp F9  &kp F10  &kp F11  &kp F12  &kp KP_DOT       &kp KP_NUMBER_0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &none  &none
                          &none    &trans   &to 0            &to 0            &trans     &none
            >;

            label = "Fun";
        };

        Flash {
            bindings = <
&dongle_bootload_macro  &none  &none             &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &out OUT_TOG  &none  &none
&none                   &none  &kp C_MUTE        &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none  &none         &bt BT_CLR    &bt BT_PRV    &bt BT_NXT    &none         &none
&none                   &none  &kp C_PLAY_PAUSE  &kp C_PREV            &kp C_NEXT            &none  &none         &none         &none         &none         &none         &none
                                                 &none                 &trans                &to 0  &to 0         &trans        &none
            >;

            label = "Flash";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Flash {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
